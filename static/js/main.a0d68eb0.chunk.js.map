{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/CharacterSkeleton.js","components/ErrorMessage.js","components/ModalCart.js","components/Characters.js","components/Dimension.js","components/Queries.js","App.js","config/apollo.js","reportWebVitals.js","index.js"],"names":["Header","props","className","size","src","alt","type","onClick","characters","locations","episodes","Search","Input","SearchBar","placeholder","e","handleClick","onChange","handleChange","Meta","Card","gridStyle","width","display","border","padding","CharacterSkeleton","style","active","avatar","hoverable","title","description","ErrorMessage","status","subTitle","ModalCart","data","useState","visible","setVisible","confirmLoading","setConfirmLoading","cover","id","image","name","onOk","setTimeout","onCancel","console","log","centered","verticalAlign","HeartTwoTone","twoToneColor","species","gender","origin","episode","Characters","pages","setPages","GET_CHARACTERS","useQuery","variables","language","loading","error","results","map","defaultCurrent","defaultPageSize","total","info","count","current","pageSize","Dimension","GET_QUERY","onShowSizeChange","location","i","dimension","residents","air_date","Queries","search","query","gql","GET_EPISODES","GET_LOCATIONS","App","state","searchText","handleInputChange","event","setState","target","value","handleButtonClick","this","Fragment","React","Component","client","ApolloClient","uri","cache","InMemoryCache","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0d68eb0.chunk.js","sourcesContent":["// app/SearchBar.js\nimport { Button, Avatar } from 'antd';\nimport './Header.css'\n\n\n// En las props tenemos los métodos necesarios para interactuar con nuestros usuarios:\nfunction Header(props) {\n\treturn (\n\t\t<div className=\"menu\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<Avatar size={64} src={process.env.PUBLIC_URL + '/logo.jpeg'} alt=\"logo\" />\n\t\t\t\t<div className=\"right\">\n\t\t\t\t\t<Button type=\"text\" className=\"button\" onClick={props.characters}>\n\t\t\t\t\t\tCharacters\n    \t\t\t\t</Button>\n\t\t\t\t\t<Button type=\"text\" className=\"button\" onClick={props.locations}>\n\t\t\t\t\t\tLocations\n\t\t    \t\t</Button>\n\t\t\t\t\t<Button type=\"text\" className=\"button\" onClick={props.episodes}>\n\t\t\t\t\t\tEpisodes\n    \t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Header;","// app/SearchBar.js\nimport { Input} from 'antd';\nimport './SearchBar.css'\nconst { Search } = Input;\n\n// En las props tenemos los métodos necesarios para interactuar con nuestros usuarios:\nfunction SearchBar(props) {\n\treturn (\n\t\t\t<div className=\"SearchBar\">\n\t\t\t\t<Search placeholder=\"input search text\" onClick={e => props.handleClick(e)} onChange={e => props.handleChange(e)}/>\n\t\t\t</div>\n\t\t);\n}\n\nexport default SearchBar;","\nimport { Skeleton, Card } from 'antd';\n\nconst { Meta } = Card;\n\nconst gridStyle = {\n    width: '20%',\n    display: 'inline-block',\n    border: '1px solid gray',\n    padding: '1%'\n};\n\nconst CharacterSkeleton = () => {\n    return (\n        <div style={gridStyle}>\n            <Skeleton active avatar>\n                <Card\n                    hoverable\n                    style={{ width: '100%' }}\n                >\n                    <Meta title description />\n                </Card>\n            </Skeleton>\n        </div>\n    )\n}\n\nexport default CharacterSkeleton;","import { Result } from 'antd';\n\nconst ErrorMessage = () => {\n\n    return(\n    <>\n    <Result\n        status=\"404\"\n        title=\"404\"\n        subTitle=\"Sorry, you data not exist  in this page.\"\n        \n    />\n    </>)\n}\n\nexport default ErrorMessage;","import { Modal, Card, Image } from 'antd';\nimport { useState } from 'react';\nimport \"./ModalCart.css\"\nimport {  HeartTwoTone } from '@ant-design/icons';\n\nconst { Meta } = Card;\n\n\nconst ModalCart = ({ data }) => {\n  const [visible, setVisible] = useState(false);\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  \n\n  const showModal = () => {\n\n    setVisible(true);\n  };\n\n  const handleOk = () => {\n    \n    setConfirmLoading(true);\n    setTimeout(() => {\n      setVisible(false);\n      setConfirmLoading(false);\n    }, 2000);\n  };\n\n  const handleCancel = () => {\n    console.log('Clicked cancel button');\n    setVisible(false);\n  };\n\n  return (\n    <div className=\"card-modal\">\n      <Card\n        hoverable\n        onClick={showModal}\n        style={{ width: '100%' }}\n        cover={<img alt={data.id} src={data.image} />}\n      >\n        <Meta title={data.name} description={data.status} />\n\n      </Card>\n      <Modal\n        title={data.name}\n        visible={visible}\n        onOk={handleOk}\n        confirmLoading={confirmLoading}\n        onCancel={handleCancel}\n        width={1000}\n        centered\n      >\n        <div className=\"content-modal\" >\n          <Image\n            width={250}\n            src={data.image}\n            alt={data.id}\n            style={{ display: \"inline-block\", verticalAlign: \"bottom\" }}\n          />\n          <div className=\"content-message\">\n\n            {data.status === \"Alive\" ? <h3 className=\"title\"> <HeartTwoTone twoToneColor=\"#eb2f96\" />{data.status}</h3>\n              : <h3 className=\"title\"><HeartTwoTone twoToneColor=\"#001100\" />{data.status}</h3>\n            }\n            <h3>{data.species} - {data.gender}</h3>\n            <p>Last known location:</p>\n            <p className=\"title\">{data.origin.name}</p>\n            \n            <p>First seen in:</p>\n            <p className=\"title\">{data.episode[0].name}</p>\n          </div>\n        </div>\n\n      </Modal>\n\n    </div >\n  );\n};\n\nexport default ModalCart;","\nimport { useQuery } from '@apollo/client';\nimport { Pagination } from 'antd';\n\nimport CharacterSkeleton from \"./CharacterSkeleton\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport ModalCart from './ModalCart'\n\n\nconst Characters = ({ pages, setPages, GET_CHARACTERS }) => {\n\n    function onShowSizeChange(current, pageSize) {\n        setPages(current)\n    }\n\n    const { loading, error, data } = useQuery(GET_CHARACTERS, {\n        variables: { language: 'english' },\n    });\n\n    if (loading)\n        return (\n            <div className=\"container\">\n                <CharacterSkeleton />\n                <CharacterSkeleton />\n                <CharacterSkeleton />\n                <CharacterSkeleton />\n                <CharacterSkeleton />\n            </div>\n        );\n\n    if (error) return <ErrorMessage />;\n\n    return (\n        <div className=\"container\">\n\n            {data &&\n                data.characters.results.map(\n                    (data) => (\n                        <ModalCart data={data} key={data.id} />\n                    )\n                )\n            }\n\n            {data.characters && <Pagination className=\"pagination\"\n                defaultCurrent={pages}\n                defaultPageSize={20}\n                total={data.characters.info.count}\n                onChange={onShowSizeChange} />}\n        </div>\n    );\n}\n\nexport default Characters;","\n\nimport { useQuery } from '@apollo/client';\nimport { Pagination} from 'antd';\nimport CharacterSkeleton from \"./CharacterSkeleton\";\nimport ErrorMessage from \"./ErrorMessage\";\n\n\n\nconst Dimension = ({ pages, setPages, GET_QUERY }) => {\n\n    \n\n    function onShowSizeChange(current, pageSize) {\n        setPages(current)\n    }\n\n  \n    const { loading, error, data } = useQuery(GET_QUERY, {\n        variables: { language: 'english' },\n    });\n\n    if (loading)\n        return (\n            <div className=\"container\">\n                <CharacterSkeleton />\n                <CharacterSkeleton />\n                <CharacterSkeleton />\n                <CharacterSkeleton />\n                <CharacterSkeleton />\n            </div>\n        );\n\n    if (error) return <ErrorMessage />;\n\n    return (\n        <div className=\"container\">\n\n            { data.locations &&\n                data.locations.results.map((location, i) =>\n                    <>\n                        <div key={i}>\n\n                            <h1 >Location:{location.name} </h1>\n                            <h3 >Dimension: {location.dimension} </h3>\n                            <h4 >Type: {location.type} </h4>\n                            {location.residents.map(\n                                (data) =>\n                                    <div className=\"card-modal\">\n                                        <img src={data.image} alt={data.id} />\n                                        <p>{data.name}</p>\n                                    </div>\n                            )\n                            }\n                        </div>\n                    </>\n                )\n            }\n\n            {data.locations &&\n                <Pagination className=\"pagination\"\n                    defaultCurrent={pages}\n                    defaultPageSize={20}\n                    total={data.locations.info.count}\n                    onChange={onShowSizeChange} />\n            }\n\n            { data.episodes &&\n                data.episodes.results.map((episode, i) =>\n                    <>\n                        <div key={i}>\n\n                            <h1 >Name:{episode.name} </h1>\n                            <h3 >Episode: {episode.episode} </h3>\n                            <h4 >Air Date: {episode.air_date} </h4>\n                            {episode.characters.map(\n                                (data) =>\n                                    <div className=\"card-modal\">\n                                        <img src={data.image} alt={data.id} />\n                                        <p>{data.name}</p>\n                                    </div>\n                            )\n                            }\n                        </div>\n                    </>\n                )\n            }\n\n            { data.episodes &&\n                <Pagination className=\"pagination\"\n                    defaultCurrent={pages}\n                    defaultPageSize={20}\n                    total={data.episodes.info.count}\n                    onChange={onShowSizeChange} />\n            }\n\n\n        </div>\n    )\n}\n\nexport default Dimension;","\nimport { useState } from \"react\";\nimport { gql} from '@apollo/client';\n\nimport Characters from \"./Characters\";\nimport Dimension from \"./Dimension\";\nimport './Queries.css'\n\n\n\n\nfunction Queries({ search, query = \"GET_CHARACTERS\" }) {\n  const [pages, setPages] = useState(1);\n\n  const GET_CHARACTERS = gql`\nquery {\n    characters(page: ${pages},filter: { name: \"${search}\" }) {\n      info {\n        count,\n        pages\n      }\n      results {\n        id,name,image,status,species,type,gender,created,origin{name},location{name,id,dimension},episode{name}\n      }\n    }\n  }\n`;\n\n  const GET_EPISODES = gql`\n    query {\n      episodes(page: ${pages},filter: { name: \"${search}\" }) {\n        info {\n          count\n          pages\n        }\n        results {\n            name\n            id\n            air_date\n            episode\n            characters{id,name,image,status,species,type,gender,created}\n      \n        }\n      }\n    }`;\n\n  const GET_LOCATIONS = gql`\nquery {\n  locations(page: ${pages},filter: { name: \"${search}\" }) {\n    info {\n      count\n      pages\n    }\n    results {\n        name\n        id\n        dimension\n        type\n      \tresidents{id,name,image,status,species,type,gender,created}\n  \n    }\n  }\n}`;\n\n\n\n  return (\n    <>\n      {\n        query === \"GET_CHARACTERS\" &&\n        <Characters\n          pages={pages} setPages={setPages} GET_CHARACTERS={GET_CHARACTERS}\n        />\n      }\n      {\n        query === \"GET_LOCATIONS\" &&\n        <Dimension\n          pages={pages} setPages={setPages} GET_QUERY={GET_LOCATIONS}\n        />\n      }\n      {\n        query === \"GET_EPISODES\" &&\n        < Dimension\n          pages={pages} setPages={setPages} GET_QUERY={GET_EPISODES}\n        />\n      }\n    </>\n  );\n}\n\nexport default Queries;","// app/application.js\nimport React from 'react';\n\nimport Header from \"./components/Header\";\n\nimport SearchBar from './components/SearchBar'; // ya lo crearemos :D\nimport Queries from './components/Queries'; // tambien ya lo crearemos :P\n\nclass App extends React.Component {\n\tstate = {\n\t\tsearchText: '',// solo habrá resultados cuando el usuario pulse el botón\n\t\tquery: \"GET_CHARACTERS\"\n\t};\n\n\thandleInputChange = event => {\n\t\t/*\n\t\t * Para saber lo que el usuario quiere buscar, necesitamos\n\t\t * escuchar los cambios del input. Así cuando oprima el botón\n\t\t * de búsqueda, sabremos cuales GIFs espera encontrar.\n\t\t * \"event.target.value\" es el valor del input\n\t\t*/\n\t\tthis.setState({ searchText: event.target.value });\n\t};\n\n\thandleButtonClick = () => {\n\t\t// El componente que busca y muestra los GIFs solo se mostrara\n\t\t// cuando showResults sea true.\n\t\t//this.setState({ showResults: true });\n\t}\n\n\trender() {\n\t\tconst { searchText, query } = this.state;\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Header query={query} \n\t\t\t\tcharacters={() => this.setState({ query: 'GET_CHARACTERS' })}\n\t\t\t\tlocations={() => this.setState({ query: 'GET_LOCATIONS' })}\n\t\t\t\tepisodes={() => this.setState({ query: 'GET_EPISODES' })}\n\t\t\t\t/>\n\t\t\t\t<SearchBar\n\t\t\t\t\tsearchText={searchText}\n\t\t\t\t\thandleChange={this.handleInputChange}\n\t\t\t\t\thandleClick={this.handleButtonClick}\n\t\t\t\t/>\n\n\t\t\t\t<Queries search={searchText} query={query} />\n\n\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;","// config/apollo.js\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nexport const client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql', // por defecto la URL seria '/graphql'\n  cache: new InMemoryCache()\n});\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport { ApolloProvider } from '@apollo/client';   \nimport { client } from './config/apollo';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <ApolloProvider client={client}> {/* en \"client\" debe ir la configuración de apollo */}\n      <App />\n    </ApolloProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}